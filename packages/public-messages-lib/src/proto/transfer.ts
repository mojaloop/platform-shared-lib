/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: transfer.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google\\protobuf\\any";
import * as pb_1 from "google-protobuf";
export enum MessageTypes {
    STATE_EVENT = 0,
    STATE_SNAPSHOT = 1,
    DOMAIN_EVENT = 2,
    COMMAND = 3,
    DOMAIN_ERROR_EVENT = 4
}
export enum TransferState {
    PENDING = 0,
    ACCEPTED = 1,
    PROCESSING = 2,
    COMPLETED = 3,
    REJECTED = 4
}
export class Extension extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        key?: string;
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("key" in data && data.key != undefined) {
                this.key = data.key;
            }
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get key() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set key(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        key?: string;
        value?: string;
    }): Extension {
        const message = new Extension({});
        if (data.key != null) {
            message.key = data.key;
        }
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            key?: string;
            value?: string;
        } = {};
        if (this.key != null) {
            data.key = this.key;
        }
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.key.length)
            writer.writeString(1, this.key);
        if (this.value.length)
            writer.writeString(2, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Extension {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Extension();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.key = reader.readString();
                    break;
                case 2:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Extension {
        return Extension.deserialize(bytes);
    }
}
export class Headers extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        headers?: Map<string, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("headers" in data && data.headers != undefined) {
                this.headers = data.headers;
            }
        }
        if (!this.headers)
            this.headers = new Map();
    }
    get headers() {
        return pb_1.Message.getField(this, 1) as any as Map<string, string>;
    }
    set headers(value: Map<string, string>) {
        pb_1.Message.setField(this, 1, value as any);
    }
    static fromObject(data: {
        headers?: {
            [key: string]: string;
        };
    }): Headers {
        const message = new Headers({});
        if (typeof data.headers == "object") {
            message.headers = new Map(Object.entries(data.headers));
        }
        return message;
    }
    toObject() {
        const data: {
            headers?: {
                [key: string]: string;
            };
        } = {};
        if (this.headers != null) {
            data.headers = (Object.fromEntries)(this.headers);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.headers) {
            writer.writeMessage(1, this.headers, () => {
                writer.writeString(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Headers {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Headers();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.headers as any, reader, reader.readString, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Headers {
        return Headers.deserialize(bytes);
    }
}
export class TransferData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        headers?: Headers;
        ilpPacket?: string;
        condition?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("headers" in data && data.headers != undefined) {
                this.headers = data.headers;
            }
            if ("ilpPacket" in data && data.ilpPacket != undefined) {
                this.ilpPacket = data.ilpPacket;
            }
            if ("condition" in data && data.condition != undefined) {
                this.condition = data.condition;
            }
        }
    }
    get headers() {
        return pb_1.Message.getWrapperField(this, Headers, 1) as Headers;
    }
    set headers(value: Headers) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_headers() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get ilpPacket() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set ilpPacket(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get condition() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set condition(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        headers?: ReturnType<typeof Headers.prototype.toObject>;
        ilpPacket?: string;
        condition?: string;
    }): TransferData {
        const message = new TransferData({});
        if (data.headers != null) {
            message.headers = Headers.fromObject(data.headers);
        }
        if (data.ilpPacket != null) {
            message.ilpPacket = data.ilpPacket;
        }
        if (data.condition != null) {
            message.condition = data.condition;
        }
        return message;
    }
    toObject() {
        const data: {
            headers?: ReturnType<typeof Headers.prototype.toObject>;
            ilpPacket?: string;
            condition?: string;
        } = {};
        if (this.headers != null) {
            data.headers = this.headers.toObject();
        }
        if (this.ilpPacket != null) {
            data.ilpPacket = this.ilpPacket;
        }
        if (this.condition != null) {
            data.condition = this.condition;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_headers)
            writer.writeMessage(1, this.headers, () => this.headers.serialize(writer));
        if (this.ilpPacket.length)
            writer.writeString(2, this.ilpPacket);
        if (this.condition.length)
            writer.writeString(3, this.condition);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.headers, () => message.headers = Headers.deserialize(reader));
                    break;
                case 2:
                    message.ilpPacket = reader.readString();
                    break;
                case 3:
                    message.condition = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransferData {
        return TransferData.deserialize(bytes);
    }
}
export class TransferPrepareRequestedEvtPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        requesterFspId?: string;
        destinationFspId?: string;
        transferId?: string;
        payeeFsp?: string;
        payerFsp?: string;
        amount?: string;
        currencyCode?: string;
        expiration?: number;
        payerIdType?: string;
        payeeIdType?: string;
        transferType?: string;
        extensions?: Extension[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [12], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("requesterFspId" in data && data.requesterFspId != undefined) {
                this.requesterFspId = data.requesterFspId;
            }
            if ("destinationFspId" in data && data.destinationFspId != undefined) {
                this.destinationFspId = data.destinationFspId;
            }
            if ("transferId" in data && data.transferId != undefined) {
                this.transferId = data.transferId;
            }
            if ("payeeFsp" in data && data.payeeFsp != undefined) {
                this.payeeFsp = data.payeeFsp;
            }
            if ("payerFsp" in data && data.payerFsp != undefined) {
                this.payerFsp = data.payerFsp;
            }
            if ("amount" in data && data.amount != undefined) {
                this.amount = data.amount;
            }
            if ("currencyCode" in data && data.currencyCode != undefined) {
                this.currencyCode = data.currencyCode;
            }
            if ("expiration" in data && data.expiration != undefined) {
                this.expiration = data.expiration;
            }
            if ("payerIdType" in data && data.payerIdType != undefined) {
                this.payerIdType = data.payerIdType;
            }
            if ("payeeIdType" in data && data.payeeIdType != undefined) {
                this.payeeIdType = data.payeeIdType;
            }
            if ("transferType" in data && data.transferType != undefined) {
                this.transferType = data.transferType;
            }
            if ("extensions" in data && data.extensions != undefined) {
                this.extensions = data.extensions;
            }
        }
    }
    get requesterFspId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set requesterFspId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get destinationFspId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set destinationFspId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get transferId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set transferId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get payeeFsp() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set payeeFsp(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get payerFsp() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set payerFsp(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get amount() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set amount(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get currencyCode() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set currencyCode(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get expiration() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set expiration(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get payerIdType() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set payerIdType(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get payeeIdType() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set payeeIdType(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get transferType() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set transferType(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get extensions() {
        return pb_1.Message.getRepeatedWrapperField(this, Extension, 12) as Extension[];
    }
    set extensions(value: Extension[]) {
        pb_1.Message.setRepeatedWrapperField(this, 12, value);
    }
    static fromObject(data: {
        requesterFspId?: string;
        destinationFspId?: string;
        transferId?: string;
        payeeFsp?: string;
        payerFsp?: string;
        amount?: string;
        currencyCode?: string;
        expiration?: number;
        payerIdType?: string;
        payeeIdType?: string;
        transferType?: string;
        extensions?: ReturnType<typeof Extension.prototype.toObject>[];
    }): TransferPrepareRequestedEvtPayloadPB {
        const message = new TransferPrepareRequestedEvtPayloadPB({});
        if (data.requesterFspId != null) {
            message.requesterFspId = data.requesterFspId;
        }
        if (data.destinationFspId != null) {
            message.destinationFspId = data.destinationFspId;
        }
        if (data.transferId != null) {
            message.transferId = data.transferId;
        }
        if (data.payeeFsp != null) {
            message.payeeFsp = data.payeeFsp;
        }
        if (data.payerFsp != null) {
            message.payerFsp = data.payerFsp;
        }
        if (data.amount != null) {
            message.amount = data.amount;
        }
        if (data.currencyCode != null) {
            message.currencyCode = data.currencyCode;
        }
        if (data.expiration != null) {
            message.expiration = data.expiration;
        }
        if (data.payerIdType != null) {
            message.payerIdType = data.payerIdType;
        }
        if (data.payeeIdType != null) {
            message.payeeIdType = data.payeeIdType;
        }
        if (data.transferType != null) {
            message.transferType = data.transferType;
        }
        if (data.extensions != null) {
            message.extensions = data.extensions.map(item => Extension.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            requesterFspId?: string;
            destinationFspId?: string;
            transferId?: string;
            payeeFsp?: string;
            payerFsp?: string;
            amount?: string;
            currencyCode?: string;
            expiration?: number;
            payerIdType?: string;
            payeeIdType?: string;
            transferType?: string;
            extensions?: ReturnType<typeof Extension.prototype.toObject>[];
        } = {};
        if (this.requesterFspId != null) {
            data.requesterFspId = this.requesterFspId;
        }
        if (this.destinationFspId != null) {
            data.destinationFspId = this.destinationFspId;
        }
        if (this.transferId != null) {
            data.transferId = this.transferId;
        }
        if (this.payeeFsp != null) {
            data.payeeFsp = this.payeeFsp;
        }
        if (this.payerFsp != null) {
            data.payerFsp = this.payerFsp;
        }
        if (this.amount != null) {
            data.amount = this.amount;
        }
        if (this.currencyCode != null) {
            data.currencyCode = this.currencyCode;
        }
        if (this.expiration != null) {
            data.expiration = this.expiration;
        }
        if (this.payerIdType != null) {
            data.payerIdType = this.payerIdType;
        }
        if (this.payeeIdType != null) {
            data.payeeIdType = this.payeeIdType;
        }
        if (this.transferType != null) {
            data.transferType = this.transferType;
        }
        if (this.extensions != null) {
            data.extensions = this.extensions.map((item: Extension) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.requesterFspId.length)
            writer.writeString(1, this.requesterFspId);
        if (this.destinationFspId.length)
            writer.writeString(2, this.destinationFspId);
        if (this.transferId.length)
            writer.writeString(3, this.transferId);
        if (this.payeeFsp.length)
            writer.writeString(4, this.payeeFsp);
        if (this.payerFsp.length)
            writer.writeString(5, this.payerFsp);
        if (this.amount.length)
            writer.writeString(6, this.amount);
        if (this.currencyCode.length)
            writer.writeString(7, this.currencyCode);
        if (this.expiration != 0)
            writer.writeInt64(8, this.expiration);
        if (this.payerIdType.length)
            writer.writeString(9, this.payerIdType);
        if (this.payeeIdType.length)
            writer.writeString(10, this.payeeIdType);
        if (this.transferType.length)
            writer.writeString(11, this.transferType);
        if (this.extensions.length)
            writer.writeRepeatedMessage(12, this.extensions, (item: Extension) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferPrepareRequestedEvtPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferPrepareRequestedEvtPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.requesterFspId = reader.readString();
                    break;
                case 2:
                    message.destinationFspId = reader.readString();
                    break;
                case 3:
                    message.transferId = reader.readString();
                    break;
                case 4:
                    message.payeeFsp = reader.readString();
                    break;
                case 5:
                    message.payerFsp = reader.readString();
                    break;
                case 6:
                    message.amount = reader.readString();
                    break;
                case 7:
                    message.currencyCode = reader.readString();
                    break;
                case 8:
                    message.expiration = reader.readInt64();
                    break;
                case 9:
                    message.payerIdType = reader.readString();
                    break;
                case 10:
                    message.payeeIdType = reader.readString();
                    break;
                case 11:
                    message.transferType = reader.readString();
                    break;
                case 12:
                    reader.readMessage(message.extensions, () => pb_1.Message.addToRepeatedWrapperField(message, 12, Extension.deserialize(reader), Extension));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransferPrepareRequestedEvtPayloadPB {
        return TransferPrepareRequestedEvtPayloadPB.deserialize(bytes);
    }
}
export class TransferPrepareRequestedEvtPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        boundedContextName?: string;
        aggregateId?: string;
        aggregateName?: string;
        msgKey?: string;
        msgTopic?: string;
        msgName?: string;
        msgType?: MessageTypes;
        fspiopOpaqueState?: dependency_1.google.protobuf.Any;
        tracingInfo?: dependency_1.google.protobuf.Any;
        payload?: TransferPrepareRequestedEvtPayloadPB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("boundedContextName" in data && data.boundedContextName != undefined) {
                this.boundedContextName = data.boundedContextName;
            }
            if ("aggregateId" in data && data.aggregateId != undefined) {
                this.aggregateId = data.aggregateId;
            }
            if ("aggregateName" in data && data.aggregateName != undefined) {
                this.aggregateName = data.aggregateName;
            }
            if ("msgKey" in data && data.msgKey != undefined) {
                this.msgKey = data.msgKey;
            }
            if ("msgTopic" in data && data.msgTopic != undefined) {
                this.msgTopic = data.msgTopic;
            }
            if ("msgName" in data && data.msgName != undefined) {
                this.msgName = data.msgName;
            }
            if ("msgType" in data && data.msgType != undefined) {
                this.msgType = data.msgType;
            }
            if ("fspiopOpaqueState" in data && data.fspiopOpaqueState != undefined) {
                this.fspiopOpaqueState = data.fspiopOpaqueState;
            }
            if ("tracingInfo" in data && data.tracingInfo != undefined) {
                this.tracingInfo = data.tracingInfo;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
        }
    }
    get boundedContextName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set boundedContextName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get aggregateId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set aggregateId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get aggregateName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set aggregateName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get msgKey() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set msgKey(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get msgTopic() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set msgTopic(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get msgName() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set msgName(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get msgType() {
        return pb_1.Message.getFieldWithDefault(this, 7, MessageTypes.STATE_EVENT) as MessageTypes;
    }
    set msgType(value: MessageTypes) {
        pb_1.Message.setField(this, 7, value);
    }
    get fspiopOpaqueState() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 8) as dependency_1.google.protobuf.Any;
    }
    set fspiopOpaqueState(value: dependency_1.google.protobuf.Any) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_fspiopOpaqueState() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get tracingInfo() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 9) as dependency_1.google.protobuf.Any;
    }
    set tracingInfo(value: dependency_1.google.protobuf.Any) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_tracingInfo() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get payload() {
        return pb_1.Message.getWrapperField(this, TransferPrepareRequestedEvtPayloadPB, 10) as TransferPrepareRequestedEvtPayloadPB;
    }
    set payload(value: TransferPrepareRequestedEvtPayloadPB) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_payload() {
        return pb_1.Message.getField(this, 10) != null;
    }
    static fromObject(data: {
        boundedContextName?: string;
        aggregateId?: string;
        aggregateName?: string;
        msgKey?: string;
        msgTopic?: string;
        msgName?: string;
        msgType?: MessageTypes;
        fspiopOpaqueState?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        tracingInfo?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        payload?: ReturnType<typeof TransferPrepareRequestedEvtPayloadPB.prototype.toObject>;
    }): TransferPrepareRequestedEvtPB {
        const message = new TransferPrepareRequestedEvtPB({});
        if (data.boundedContextName != null) {
            message.boundedContextName = data.boundedContextName;
        }
        if (data.aggregateId != null) {
            message.aggregateId = data.aggregateId;
        }
        if (data.aggregateName != null) {
            message.aggregateName = data.aggregateName;
        }
        if (data.msgKey != null) {
            message.msgKey = data.msgKey;
        }
        if (data.msgTopic != null) {
            message.msgTopic = data.msgTopic;
        }
        if (data.msgName != null) {
            message.msgName = data.msgName;
        }
        if (data.msgType != null) {
            message.msgType = data.msgType;
        }
        if (data.fspiopOpaqueState != null) {
            message.fspiopOpaqueState = dependency_1.google.protobuf.Any.fromObject(data.fspiopOpaqueState);
        }
        if (data.tracingInfo != null) {
            message.tracingInfo = dependency_1.google.protobuf.Any.fromObject(data.tracingInfo);
        }
        if (data.payload != null) {
            message.payload = TransferPrepareRequestedEvtPayloadPB.fromObject(data.payload);
        }
        return message;
    }
    toObject() {
        const data: {
            boundedContextName?: string;
            aggregateId?: string;
            aggregateName?: string;
            msgKey?: string;
            msgTopic?: string;
            msgName?: string;
            msgType?: MessageTypes;
            fspiopOpaqueState?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            tracingInfo?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            payload?: ReturnType<typeof TransferPrepareRequestedEvtPayloadPB.prototype.toObject>;
        } = {};
        if (this.boundedContextName != null) {
            data.boundedContextName = this.boundedContextName;
        }
        if (this.aggregateId != null) {
            data.aggregateId = this.aggregateId;
        }
        if (this.aggregateName != null) {
            data.aggregateName = this.aggregateName;
        }
        if (this.msgKey != null) {
            data.msgKey = this.msgKey;
        }
        if (this.msgTopic != null) {
            data.msgTopic = this.msgTopic;
        }
        if (this.msgName != null) {
            data.msgName = this.msgName;
        }
        if (this.msgType != null) {
            data.msgType = this.msgType;
        }
        if (this.fspiopOpaqueState != null) {
            data.fspiopOpaqueState = this.fspiopOpaqueState.toObject();
        }
        if (this.tracingInfo != null) {
            data.tracingInfo = this.tracingInfo.toObject();
        }
        if (this.payload != null) {
            data.payload = this.payload.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.boundedContextName.length)
            writer.writeString(1, this.boundedContextName);
        if (this.aggregateId.length)
            writer.writeString(2, this.aggregateId);
        if (this.aggregateName.length)
            writer.writeString(3, this.aggregateName);
        if (this.msgKey.length)
            writer.writeString(4, this.msgKey);
        if (this.msgTopic.length)
            writer.writeString(5, this.msgTopic);
        if (this.msgName.length)
            writer.writeString(6, this.msgName);
        if (this.msgType != MessageTypes.STATE_EVENT)
            writer.writeEnum(7, this.msgType);
        if (this.has_fspiopOpaqueState)
            writer.writeMessage(8, this.fspiopOpaqueState, () => this.fspiopOpaqueState.serialize(writer));
        if (this.has_tracingInfo)
            writer.writeMessage(9, this.tracingInfo, () => this.tracingInfo.serialize(writer));
        if (this.has_payload)
            writer.writeMessage(10, this.payload, () => this.payload.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferPrepareRequestedEvtPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferPrepareRequestedEvtPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.boundedContextName = reader.readString();
                    break;
                case 2:
                    message.aggregateId = reader.readString();
                    break;
                case 3:
                    message.aggregateName = reader.readString();
                    break;
                case 4:
                    message.msgKey = reader.readString();
                    break;
                case 5:
                    message.msgTopic = reader.readString();
                    break;
                case 6:
                    message.msgName = reader.readString();
                    break;
                case 7:
                    message.msgType = reader.readEnum();
                    break;
                case 8:
                    reader.readMessage(message.fspiopOpaqueState, () => message.fspiopOpaqueState = dependency_1.google.protobuf.Any.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.tracingInfo, () => message.tracingInfo = dependency_1.google.protobuf.Any.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.payload, () => message.payload = TransferPrepareRequestedEvtPayloadPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransferPrepareRequestedEvtPB {
        return TransferPrepareRequestedEvtPB.deserialize(bytes);
    }
}
export class TransferFulfilRequestedEvtPayloadPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        requesterFspId?: string;
        destinationFspId?: string;
        transferId?: string;
        transferState?: TransferState;
        completedTimestamp?: number;
        notifyPayee?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("requesterFspId" in data && data.requesterFspId != undefined) {
                this.requesterFspId = data.requesterFspId;
            }
            if ("destinationFspId" in data && data.destinationFspId != undefined) {
                this.destinationFspId = data.destinationFspId;
            }
            if ("transferId" in data && data.transferId != undefined) {
                this.transferId = data.transferId;
            }
            if ("transferState" in data && data.transferState != undefined) {
                this.transferState = data.transferState;
            }
            if ("completedTimestamp" in data && data.completedTimestamp != undefined) {
                this.completedTimestamp = data.completedTimestamp;
            }
            if ("notifyPayee" in data && data.notifyPayee != undefined) {
                this.notifyPayee = data.notifyPayee;
            }
        }
    }
    get requesterFspId() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set requesterFspId(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get destinationFspId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set destinationFspId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get transferId() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set transferId(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get transferState() {
        return pb_1.Message.getFieldWithDefault(this, 4, TransferState.PENDING) as TransferState;
    }
    set transferState(value: TransferState) {
        pb_1.Message.setField(this, 4, value);
    }
    get completedTimestamp() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set completedTimestamp(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get notifyPayee() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set notifyPayee(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        requesterFspId?: string;
        destinationFspId?: string;
        transferId?: string;
        transferState?: TransferState;
        completedTimestamp?: number;
        notifyPayee?: boolean;
    }): TransferFulfilRequestedEvtPayloadPB {
        const message = new TransferFulfilRequestedEvtPayloadPB({});
        if (data.requesterFspId != null) {
            message.requesterFspId = data.requesterFspId;
        }
        if (data.destinationFspId != null) {
            message.destinationFspId = data.destinationFspId;
        }
        if (data.transferId != null) {
            message.transferId = data.transferId;
        }
        if (data.transferState != null) {
            message.transferState = data.transferState;
        }
        if (data.completedTimestamp != null) {
            message.completedTimestamp = data.completedTimestamp;
        }
        if (data.notifyPayee != null) {
            message.notifyPayee = data.notifyPayee;
        }
        return message;
    }
    toObject() {
        const data: {
            requesterFspId?: string;
            destinationFspId?: string;
            transferId?: string;
            transferState?: TransferState;
            completedTimestamp?: number;
            notifyPayee?: boolean;
        } = {};
        if (this.requesterFspId != null) {
            data.requesterFspId = this.requesterFspId;
        }
        if (this.destinationFspId != null) {
            data.destinationFspId = this.destinationFspId;
        }
        if (this.transferId != null) {
            data.transferId = this.transferId;
        }
        if (this.transferState != null) {
            data.transferState = this.transferState;
        }
        if (this.completedTimestamp != null) {
            data.completedTimestamp = this.completedTimestamp;
        }
        if (this.notifyPayee != null) {
            data.notifyPayee = this.notifyPayee;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.requesterFspId.length)
            writer.writeString(1, this.requesterFspId);
        if (this.destinationFspId.length)
            writer.writeString(2, this.destinationFspId);
        if (this.transferId.length)
            writer.writeString(3, this.transferId);
        if (this.transferState != TransferState.PENDING)
            writer.writeEnum(4, this.transferState);
        if (this.completedTimestamp != 0)
            writer.writeInt64(5, this.completedTimestamp);
        if (this.notifyPayee != false)
            writer.writeBool(6, this.notifyPayee);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferFulfilRequestedEvtPayloadPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferFulfilRequestedEvtPayloadPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.requesterFspId = reader.readString();
                    break;
                case 2:
                    message.destinationFspId = reader.readString();
                    break;
                case 3:
                    message.transferId = reader.readString();
                    break;
                case 4:
                    message.transferState = reader.readEnum();
                    break;
                case 5:
                    message.completedTimestamp = reader.readInt64();
                    break;
                case 6:
                    message.notifyPayee = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransferFulfilRequestedEvtPayloadPB {
        return TransferFulfilRequestedEvtPayloadPB.deserialize(bytes);
    }
}
export class TransferFulfilRequestedEvtPB extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        boundedContextName?: string;
        aggregateId?: string;
        aggregateName?: string;
        msgKey?: string;
        msgTopic?: string;
        msgName?: string;
        msgType?: MessageTypes;
        fspiopOpaqueState?: dependency_1.google.protobuf.Any;
        tracingInfo?: dependency_1.google.protobuf.Any;
        payload?: TransferFulfilRequestedEvtPayloadPB;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("boundedContextName" in data && data.boundedContextName != undefined) {
                this.boundedContextName = data.boundedContextName;
            }
            if ("aggregateId" in data && data.aggregateId != undefined) {
                this.aggregateId = data.aggregateId;
            }
            if ("aggregateName" in data && data.aggregateName != undefined) {
                this.aggregateName = data.aggregateName;
            }
            if ("msgKey" in data && data.msgKey != undefined) {
                this.msgKey = data.msgKey;
            }
            if ("msgTopic" in data && data.msgTopic != undefined) {
                this.msgTopic = data.msgTopic;
            }
            if ("msgName" in data && data.msgName != undefined) {
                this.msgName = data.msgName;
            }
            if ("msgType" in data && data.msgType != undefined) {
                this.msgType = data.msgType;
            }
            if ("fspiopOpaqueState" in data && data.fspiopOpaqueState != undefined) {
                this.fspiopOpaqueState = data.fspiopOpaqueState;
            }
            if ("tracingInfo" in data && data.tracingInfo != undefined) {
                this.tracingInfo = data.tracingInfo;
            }
            if ("payload" in data && data.payload != undefined) {
                this.payload = data.payload;
            }
        }
    }
    get boundedContextName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set boundedContextName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get aggregateId() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set aggregateId(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get aggregateName() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set aggregateName(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get msgKey() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set msgKey(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get msgTopic() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set msgTopic(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get msgName() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set msgName(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get msgType() {
        return pb_1.Message.getFieldWithDefault(this, 7, MessageTypes.STATE_EVENT) as MessageTypes;
    }
    set msgType(value: MessageTypes) {
        pb_1.Message.setField(this, 7, value);
    }
    get fspiopOpaqueState() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 8) as dependency_1.google.protobuf.Any;
    }
    set fspiopOpaqueState(value: dependency_1.google.protobuf.Any) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_fspiopOpaqueState() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get tracingInfo() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 9) as dependency_1.google.protobuf.Any;
    }
    set tracingInfo(value: dependency_1.google.protobuf.Any) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_tracingInfo() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get payload() {
        return pb_1.Message.getWrapperField(this, TransferFulfilRequestedEvtPayloadPB, 10) as TransferFulfilRequestedEvtPayloadPB;
    }
    set payload(value: TransferFulfilRequestedEvtPayloadPB) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_payload() {
        return pb_1.Message.getField(this, 10) != null;
    }
    static fromObject(data: {
        boundedContextName?: string;
        aggregateId?: string;
        aggregateName?: string;
        msgKey?: string;
        msgTopic?: string;
        msgName?: string;
        msgType?: MessageTypes;
        fspiopOpaqueState?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        tracingInfo?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        payload?: ReturnType<typeof TransferFulfilRequestedEvtPayloadPB.prototype.toObject>;
    }): TransferFulfilRequestedEvtPB {
        const message = new TransferFulfilRequestedEvtPB({});
        if (data.boundedContextName != null) {
            message.boundedContextName = data.boundedContextName;
        }
        if (data.aggregateId != null) {
            message.aggregateId = data.aggregateId;
        }
        if (data.aggregateName != null) {
            message.aggregateName = data.aggregateName;
        }
        if (data.msgKey != null) {
            message.msgKey = data.msgKey;
        }
        if (data.msgTopic != null) {
            message.msgTopic = data.msgTopic;
        }
        if (data.msgName != null) {
            message.msgName = data.msgName;
        }
        if (data.msgType != null) {
            message.msgType = data.msgType;
        }
        if (data.fspiopOpaqueState != null) {
            message.fspiopOpaqueState = dependency_1.google.protobuf.Any.fromObject(data.fspiopOpaqueState);
        }
        if (data.tracingInfo != null) {
            message.tracingInfo = dependency_1.google.protobuf.Any.fromObject(data.tracingInfo);
        }
        if (data.payload != null) {
            message.payload = TransferFulfilRequestedEvtPayloadPB.fromObject(data.payload);
        }
        return message;
    }
    toObject() {
        const data: {
            boundedContextName?: string;
            aggregateId?: string;
            aggregateName?: string;
            msgKey?: string;
            msgTopic?: string;
            msgName?: string;
            msgType?: MessageTypes;
            fspiopOpaqueState?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            tracingInfo?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            payload?: ReturnType<typeof TransferFulfilRequestedEvtPayloadPB.prototype.toObject>;
        } = {};
        if (this.boundedContextName != null) {
            data.boundedContextName = this.boundedContextName;
        }
        if (this.aggregateId != null) {
            data.aggregateId = this.aggregateId;
        }
        if (this.aggregateName != null) {
            data.aggregateName = this.aggregateName;
        }
        if (this.msgKey != null) {
            data.msgKey = this.msgKey;
        }
        if (this.msgTopic != null) {
            data.msgTopic = this.msgTopic;
        }
        if (this.msgName != null) {
            data.msgName = this.msgName;
        }
        if (this.msgType != null) {
            data.msgType = this.msgType;
        }
        if (this.fspiopOpaqueState != null) {
            data.fspiopOpaqueState = this.fspiopOpaqueState.toObject();
        }
        if (this.tracingInfo != null) {
            data.tracingInfo = this.tracingInfo.toObject();
        }
        if (this.payload != null) {
            data.payload = this.payload.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.boundedContextName.length)
            writer.writeString(1, this.boundedContextName);
        if (this.aggregateId.length)
            writer.writeString(2, this.aggregateId);
        if (this.aggregateName.length)
            writer.writeString(3, this.aggregateName);
        if (this.msgKey.length)
            writer.writeString(4, this.msgKey);
        if (this.msgTopic.length)
            writer.writeString(5, this.msgTopic);
        if (this.msgName.length)
            writer.writeString(6, this.msgName);
        if (this.msgType != MessageTypes.STATE_EVENT)
            writer.writeEnum(7, this.msgType);
        if (this.has_fspiopOpaqueState)
            writer.writeMessage(8, this.fspiopOpaqueState, () => this.fspiopOpaqueState.serialize(writer));
        if (this.has_tracingInfo)
            writer.writeMessage(9, this.tracingInfo, () => this.tracingInfo.serialize(writer));
        if (this.has_payload)
            writer.writeMessage(10, this.payload, () => this.payload.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferFulfilRequestedEvtPB {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferFulfilRequestedEvtPB();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.boundedContextName = reader.readString();
                    break;
                case 2:
                    message.aggregateId = reader.readString();
                    break;
                case 3:
                    message.aggregateName = reader.readString();
                    break;
                case 4:
                    message.msgKey = reader.readString();
                    break;
                case 5:
                    message.msgTopic = reader.readString();
                    break;
                case 6:
                    message.msgName = reader.readString();
                    break;
                case 7:
                    message.msgType = reader.readEnum();
                    break;
                case 8:
                    reader.readMessage(message.fspiopOpaqueState, () => message.fspiopOpaqueState = dependency_1.google.protobuf.Any.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.tracingInfo, () => message.tracingInfo = dependency_1.google.protobuf.Any.deserialize(reader));
                    break;
                case 10:
                    reader.readMessage(message.payload, () => message.payload = TransferFulfilRequestedEvtPayloadPB.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TransferFulfilRequestedEvtPB {
        return TransferFulfilRequestedEvtPB.deserialize(bytes);
    }
}
export class Envelope extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: string;
        event?: Uint8Array;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("event" in data && data.event != undefined) {
                this.event = data.event;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set type(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get event() {
        return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array(0)) as Uint8Array;
    }
    set event(value: Uint8Array) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        type?: string;
        event?: Uint8Array;
    }): Envelope {
        const message = new Envelope({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.event != null) {
            message.event = data.event;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: string;
            event?: Uint8Array;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.event != null) {
            data.event = this.event;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type.length)
            writer.writeString(1, this.type);
        if (this.event.length)
            writer.writeBytes(2, this.event);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Envelope {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Envelope();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readString();
                    break;
                case 2:
                    message.event = reader.readBytes();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): Envelope {
        return Envelope.deserialize(bytes);
    }
}
